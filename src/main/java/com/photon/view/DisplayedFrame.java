package com.photon.view;

import com.photon.controller.Controller;
import com.photon.model.InvoiceHeader;
import com.photon.model.DraftInvoiceHeader;

import javax.management.InstanceAlreadyExistsException;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.*;
import java.text.ParseException;

/**
 * Main window is opened here. Only one instance of this is allowed.
 * All displayed containers (text fields, labels, buttons, etc...) source codes are generated by NetBeans.
 */
public class DisplayedFrame extends JFrame{

    private static DisplayedFrame instance;
    private Controller listener;

    /** Declaration of needed containers */
    private JButton createInvoiceButton;
    private JButton deleteInvoiceButton;
    private JButton saveChangesButton;
    private JButton cancelButton;
    private JButton addLineButton;
    private JButton deleteLineButton;
    private JLabel invoiceNumberKeyLabel;
    private JLabel invoiceNumberValueLabel;
    private JLabel invoiceDateLabel;
    private JLabel invoiceCustomerLabel;
    private JLabel invoiceLinesLabel;
    private JLabel invoiceTotalKeyLabel;
    private JLabel invoiceTotalValueLabel;
    private JMenu fileMenu;
    private JMenuBar menuBar;
    private JMenuItem loadMenuItem;
    private JMenuItem saveMenuItem;
    private JPanel invoiceHeadersPanel;
    private JPanel invoiceLinesPanel;
    private JScrollPane invoiceHeadersTableScrollPane;
    private JScrollPane invoiceLinesTableScrollPane;
    private JTable invoiceHeadersTable;
    private JTable invoiceLinesTable;
    private JTextField invoiceDateField;
    private JTextField invoiceCustomerField;

    /** Returns DisplayedFrame instance */
    public static DisplayedFrame getInstance(){
        return instance;
    }

    public String getDateTextField(){
        return invoiceDateField.getText();
    }

    public String getCustomerTextField(){
        return invoiceCustomerField.getText();
    }

    /** Updates invoices table. Call this when changes to invoice headers are made */
    public void updateInvoicesTable(){
        invoiceHeadersTable.setModel(new InvoicesTableModel());
    }

    /** Changes selected invoice programmatically */
    public void selectInvoicesRow(int row){
        invoiceHeadersTable.changeSelection(row,0,false, false);
    }

    /** Updates invoice lines table. Call this when changes to invoice lines are made */
    public void updateLinesTable(DraftInvoiceHeader invoice){
        if (invoice == null){
            invoiceNumberValueLabel.setText("");
            invoiceDateField.setText("");
            invoiceCustomerField.setText("");
            invoiceTotalValueLabel.setText("");
            invoiceLinesTable.setModel(new InvoiceLinesTableModel(null));
            return;
        }
        invoiceNumberValueLabel.setText(String.valueOf(invoice.getInvoiceNumber()));
        invoiceDateField.setText(invoice.getFormattedDate());
        invoiceCustomerField.setText(invoice.getCustomer());
        invoiceTotalValueLabel.setText(String.valueOf(invoice.getTotalPrice()));
        invoiceLinesTable.setModel(new InvoiceLinesTableModel(invoice));
    }

    /**
     * Constructor of DisplayedFrame instance.
     * This designs the displayed frame and makes up the window and assign each container to each listener.
     */
    public DisplayedFrame() throws InstanceAlreadyExistsException{
        if (instance != null)
            throw new InstanceAlreadyExistsException("Only one main display instance is allowed");

        instance = this;
        this.init();
        this.setTitle("My Hypermarket");

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridLayout(1, 2, 20, 0));


        invoiceHeadersTable.setModel(new DefaultTableModel(
                new Object [][] {},
                new String [] {
                        "No.", "Date", "Customer", "Total"
                }
        ) {
            final Class[] types = new Class [] {
                    java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            final boolean[] canEdit = new boolean [] {
                    false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });

        invoiceHeadersTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        invoiceHeadersTable.getSelectionModel().addListSelectionListener(e -> this.listener.invoiceRowChanged(e));
        invoiceHeadersTable.setName("invoices");
        invoiceHeadersTableScrollPane.setViewportView(invoiceHeadersTable);

        createInvoiceButton.setText("Create New Invoice");
        createInvoiceButton.setActionCommand(Controller.BUTTON_NEW_INVOICE);
        createInvoiceButton.addActionListener(listener);
        deleteInvoiceButton.setText("Delete Invoice");
        deleteInvoiceButton.setActionCommand(Controller.BUTTON_DELETE_INVOICE);
        deleteInvoiceButton.addActionListener(listener);

        GroupLayout invoiceHeadersPanelLayout = new GroupLayout(invoiceHeadersPanel);
        invoiceHeadersPanel.setLayout(invoiceHeadersPanelLayout);
        invoiceHeadersPanelLayout.setHorizontalGroup(
                invoiceHeadersPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(invoiceHeadersPanelLayout.createSequentialGroup()
                                .addGroup(invoiceHeadersPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(invoiceHeadersPanelLayout.createSequentialGroup()
                                                .addGap(125, 125, 125)
                                                .addComponent(createInvoiceButton)
                                                .addGap(18, 18, 18)
                                                .addComponent(deleteInvoiceButton))
                                        .addGroup(invoiceHeadersPanelLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(invoiceHeadersTableScrollPane, GroupLayout.PREFERRED_SIZE, 452, GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        invoiceHeadersPanelLayout.setVerticalGroup(
                invoiceHeadersPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, invoiceHeadersPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(invoiceHeadersTableScrollPane, GroupLayout.PREFERRED_SIZE, 561, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                                .addGroup(invoiceHeadersPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(createInvoiceButton)
                                        .addComponent(deleteInvoiceButton))
                                .addContainerGap())
        );

        getContentPane().add(invoiceHeadersPanel);

        invoiceDateField.addActionListener(this.listener);

        invoiceDateField.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent e) {
                JTextField textField= (JTextField) e.getComponent();
                if (!textField.getText().isEmpty()) {
                    try {
                        InvoiceHeader.dateFormat.parse(textField.getText());
                        for (ActionListener listener : textField.getActionListeners()) {
                            listener.actionPerformed(new ActionEvent(e.getSource(), ActionEvent.ACTION_PERFORMED, Controller.TEXT_FIELD_DATE_UPDATE));
                        }
                    } catch (ParseException ex) {
                        e.getComponent().requestFocusInWindow();
                    }
                }
            }
        });

        invoiceDateField.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent e) {
                JTextField textField= (JTextField) e.getComponent();
                for (FocusListener listener:textField.getFocusListeners()) {
                    listener.focusLost(new FocusEvent(e.getComponent(), FocusEvent.FOCUS_LOST));
                }
            }
        });

        invoiceCustomerField.addActionListener(this.listener);

        invoiceCustomerField.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent e) {
                JTextField textField= (JTextField) e.getComponent();
                for (ActionListener listener:textField.getActionListeners()){
                    listener.actionPerformed(new ActionEvent(e.getSource(), ActionEvent.ACTION_PERFORMED, Controller.TEXT_FIELD_CUSTOMER_UPDATE));
                }
            }
        });

        invoiceCustomerField.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent e) {
                JTextField textField= (JTextField) e.getComponent();
                for (FocusListener listener:textField.getFocusListeners()) {
                    listener.focusLost(new FocusEvent(e.getComponent(), FocusEvent.FOCUS_LOST));
                }
            }
        });

        invoiceLinesLabel.setText("Invoice Lines:");

        invoiceTotalKeyLabel.setText("Invoice Total:");

        invoiceTotalValueLabel.setText(null);

        invoiceLinesTable.setModel(new DefaultTableModel(
                new Object [][] {},
                new String [] {
                        "No.", "Item Name", "Item Price", "Count", "Item Total"
                }
        ) {
            final Class[] types = new Class [] {
                    java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class
            };
            final boolean[] canEdit = new boolean [] {
                    false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });

        invoiceLinesTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        invoiceLinesTable.getSelectionModel().addListSelectionListener(e -> this.listener.lineRowChanged(e));
        invoiceLinesTable.addMouseListener(listener);
        invoiceLinesTableScrollPane.setViewportView(invoiceLinesTable);

        invoiceNumberKeyLabel.setText("Invoice Number:");

        invoiceNumberValueLabel.setText(null);

        invoiceDateLabel.setText("Invoice Date:");

        invoiceCustomerLabel.setText("Customer Name:");

        saveChangesButton.setText("Save");
        saveChangesButton.addActionListener(this.listener);
        saveChangesButton.setActionCommand(Controller.BUTTON_INVOICE_SAVE);
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(this.listener);
        cancelButton.setActionCommand(Controller.BUTTON_INVOICE_CANCEL);

        addLineButton.setText("+");
        addLineButton.addActionListener(this.listener);
        addLineButton.setActionCommand(Controller.BUTTON_ADD_ITEM);
        deleteLineButton.setText("-");
        deleteLineButton.addActionListener(this.listener);
        deleteLineButton.setActionCommand(Controller.BUTTON_DELETE_ITEM);

        GroupLayout invoiceLinesPanelLayout = new GroupLayout(invoiceLinesPanel);
        invoiceLinesPanel.setLayout(invoiceLinesPanelLayout);
        invoiceLinesPanelLayout.setHorizontalGroup(
                invoiceLinesPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(invoiceLinesPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(invoiceLinesPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(invoiceLinesPanelLayout.createSequentialGroup()
                                                .addGroup(invoiceLinesPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                                        .addComponent(invoiceLinesLabel)
                                                        .addGroup(invoiceLinesPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                .addComponent(invoiceNumberKeyLabel)
                                                                .addComponent(invoiceDateLabel)
                                                                .addComponent(invoiceCustomerLabel)
                                                                .addComponent(invoiceTotalKeyLabel)))
                                                .addGroup(invoiceLinesPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addGroup(invoiceLinesPanelLayout.createSequentialGroup()
                                                                .addGap(49, 49, 49)
                                                                .addGroup(invoiceLinesPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                        .addComponent(invoiceTotalValueLabel)
                                                                        .addComponent(invoiceCustomerField, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(invoiceDateField, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                                                                        .addGroup(invoiceLinesPanelLayout.createSequentialGroup()
                                                                                .addComponent(saveChangesButton)
                                                                                .addGap(38, 38, 38)
                                                                                .addComponent(cancelButton))
                                                                        .addComponent(invoiceNumberValueLabel)))
                                                        .addGroup(invoiceLinesPanelLayout.createSequentialGroup()
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(addLineButton)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(deleteLineButton))))
                                        .addGroup(invoiceLinesPanelLayout.createSequentialGroup()
                                                .addGap(16, 16, 16)
                                                .addComponent(invoiceLinesTableScrollPane, GroupLayout.PREFERRED_SIZE, 478, GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(52, Short.MAX_VALUE))
        );
        invoiceLinesPanelLayout.setVerticalGroup(
                invoiceLinesPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, invoiceLinesPanelLayout.createSequentialGroup()
                                .addGap(63, 63, 63)
                                .addGroup(invoiceLinesPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(invoiceNumberKeyLabel)
                                        .addComponent(invoiceNumberValueLabel))
                                .addGap(18, 18, 18)
                                .addGroup(invoiceLinesPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(invoiceDateLabel)
                                        .addComponent(invoiceDateField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(invoiceLinesPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(invoiceCustomerLabel)
                                        .addComponent(invoiceCustomerField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(invoiceLinesPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(invoiceTotalKeyLabel)
                                        .addComponent(invoiceTotalValueLabel))
                                .addGap(18, 18, 18)
                                .addGroup(invoiceLinesPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(invoiceLinesLabel)
                                        .addComponent(addLineButton)
                                        .addComponent(deleteLineButton))
                                .addGap(18, 18, 18)
                                .addComponent(invoiceLinesTableScrollPane, GroupLayout.PREFERRED_SIZE, 330, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                                .addGroup(invoiceLinesPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(saveChangesButton)
                                        .addComponent(cancelButton))
                                .addContainerGap())
        );

        getContentPane().add(invoiceLinesPanel);

        fileMenu.setText("File");

        loadMenuItem.setText("Load File");
        loadMenuItem.addActionListener(listener);
        loadMenuItem.setActionCommand(Controller.FILE_LOAD);
        fileMenu.add(loadMenuItem);

        saveMenuItem.setText("Save File");
        saveMenuItem.addActionListener(listener);
        saveMenuItem.setActionCommand(Controller.FILE_SAVE);
        fileMenu.add(saveMenuItem);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        pack();

        this.add(invoiceLinesPanel);
        this.setExtendedState(MAXIMIZED_BOTH);

        /* Displays some data upon booting */

        String[][] initialInvoiceHeaders = new String[][]{
                {"1", "22/11/2020", "Ali"},
                {"2", "13/10/2021", "Saleh"}
        };

        String[][] initialInvoiceLines = new String[][]{
                {"1", "Mobile", "3200", "1"},
                {"1", "Cover", "20", "2"},
                {"1", "Headphone", "130", "1"},
                {"2", "Laptop", "4000", "1"},
                {"2", "Mouse", "35", "1"},
        };

        InvoiceHeader.reconstructInvoices(initialInvoiceHeaders, initialInvoiceLines);
        this.updateInvoicesTable();
    }

    /** Initialises all variables */
    private void init(){
        listener = new Controller();

        invoiceHeadersPanel = new JPanel();
        invoiceHeadersTableScrollPane = new JScrollPane();
        invoiceHeadersTable = new JTable();
        createInvoiceButton = new JButton();
        deleteInvoiceButton = new JButton();
        invoiceLinesPanel = new JPanel();
        invoiceLinesLabel = new JLabel();
        invoiceTotalKeyLabel = new JLabel();
        invoiceTotalValueLabel = new JLabel();
        invoiceLinesTableScrollPane = new JScrollPane();
        invoiceLinesTable = new JTable();
        invoiceNumberKeyLabel = new JLabel();
        invoiceNumberValueLabel = new JLabel();
        invoiceDateLabel = new JLabel();
        invoiceDateField = new JTextField();
        invoiceCustomerLabel = new JLabel();
        invoiceCustomerField = new JTextField();
        saveChangesButton = new JButton();
        cancelButton = new JButton();
        addLineButton = new JButton();
        deleteLineButton = new JButton();
        menuBar = new JMenuBar();
        fileMenu = new JMenu();
        loadMenuItem = new JMenuItem();
        saveMenuItem = new JMenuItem();
    }
}